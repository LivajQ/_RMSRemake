void DifficultySetter(int diff) // 1 - crybaby, 2 - easy, 3 - medium, 4 - hard, 5 - extreme, 6 - patrick
{
	switch(diff)
	{
		case 1:
			SetPlayerHealth(1000.0f);
			SetPlayerMoveSpeedMul(1.5f * GetLocalVarFloat("Multiplier"));
			SetPlayerRunSpeedMul(1.5f * GetLocalVarFloat("Multiplier"));
			SetPlayerLampOil(100.0f);
			break;
		case 2:
			SetPlayerHealth(750.0f);
			SetPlayerMoveSpeedMul(1.3f * GetLocalVarFloat("Multiplier"));
			SetPlayerRunSpeedMul(1.3f * GetLocalVarFloat("Multiplier"));
			SetPlayerLampOil(25.0f);
			break;
		case 3:
			SetPlayerHealth(500.0f);
			SetPlayerMoveSpeedMul(1.15f * GetLocalVarFloat("Multiplier"));
			SetPlayerRunSpeedMul(1.15f * GetLocalVarFloat("Multiplier"));
			SetPlayerLampOil(15.0f);
			break;
		case 4:
			SetPlayerHealth(300.0f);
			SetPlayerMoveSpeedMul(1.0f * GetLocalVarFloat("Multiplier"));
			SetPlayerRunSpeedMul(1.0f * GetLocalVarFloat("Multiplier"));
			SetPlayerLampOil(20.0f);
			break;
		case 5:
			SetPlayerHealth(150.0f);
			SetPlayerMoveSpeedMul(0.9f * GetLocalVarFloat("Multiplier"));
			SetPlayerRunSpeedMul(0.9f * GetLocalVarFloat("Multiplier"));
			SetPlayerLampOil(5.0f);
			break;
		case 6:
			SetPlayerHealth(100.0f);
			SetPlayerMoveSpeedMul(0.75f * GetLocalVarFloat("Multiplier"));
			SetPlayerRunSpeedMul(0.75f * GetLocalVarFloat("Multiplier"));
			SetPlayerLampOil(2.5f);
			break;
		default:
			SetPlayerHealth(500.0f);
			SetPlayerMoveSpeedMul(1.15f * GetLocalVarFloat("Multiplier"));
			SetPlayerRunSpeedMul(1.15f * GetLocalVarFloat("Multiplier"));
			SetPlayerLampOil(15.0f);
			break;
	}
}
void PartyStarter()
{
	ChooseTune();
	AddTimer("b", 0.5f, "PartyLights");
}
void ChooseTune()
{
	StopMusic(1, 1);
	StopMusic(1, 2);
	StopMusic(1, 3);
	bool IsAny = false;
	int Random;
	if(GetGlobalVarInt("PlaylistActive") == 1)
	{
		AddDebugMessage("Script works", false);
		for(int x = 1; x <= 15; x++)
		{
			if(GetGlobalVarString("CustomSong_" + x) != "None") IsAny = true;
		}
		if(IsAny)
		{
			while(true)
			{
				Random = RandInt(1, 15);
				if(GetGlobalVarString("CustomSong_" + Random) != "None")
				{
					PlayMusic(GetGlobalVarString("CustomSong_" + Random), true, 1, 1, 1, false);
					break;
				}
			}
			return;
		}
	}
	PlayMusic("PartyMusic_" + RandInt(1, GetGlobalVarInt("SongAmount")), true, 1, 1, 1, false);
}
void PartyLights(string &in asTimer)
{
	float ColorR = RandFloat(0.0f, 1.0f);
	float ColorG = RandFloat(0.0f, 1.0f);
	float ColorB = RandFloat(0.0f, 1.0f);
	float SkyR = RandFloat(0.0f, 1.0f);
	float SkyG = RandFloat(0.0f, 1.0f);
	float SkyB = RandFloat(0.0f, 1.0f);

	for(int x = 1; x <= 100; x++)
	{
		FadeLightTo("BoxLight_" + x, ColorR, ColorG, ColorB, 1.0f, -1, 0.5f);
		FadeLightTo("PointLight_" + x, RandFloat(0.0f, 1.0f), RandFloat(0.0f, 1.0f), RandFloat(0.0f, 1.0f), 1.0f, -1, 0.5f);
	}

	AddTimer("b", 0.5f, "PartyLights");
}
void Song(string &in asEntity)
{
	ChooseTune();
}
void Leaving(string &in asEntity)
{
	ChangeMap("SR_spawn.map", "PlayerStartArea_3", "", "");
}
void SeizureMoment(string &in asTimer)
{
	float rollamount = RandFloat(1.0f, 100.0f);
	float rollspeed = RandFloat(50.0f, 200.0f);
	float imagetrailamount = RandFloat(0.7f, 2.5f);
	float imagetrailspeed = RandFloat(1.0f, 10.0f);
	float bluramount = RandFloat(0.1f, 3.0f);
	float blurspeed = RandFloat(0.1f, 3.0f);
	float timeramount = RandFloat(0.3f, 3.0f);
	float fovamount = RandFloat(0.20f, 3.0f);
	float fovspeed = RandFloat(0.1f, 2.0f);
	float aspectamount = RandFloat(0.1f, 5.0f);
	float aspectspeed = RandFloat(0.1f, 2.0f);
	if(GetLocalVarInt("SeizureState") == 1)
	{
	    FadePlayerRollTo(rollamount, rollspeed, rollspeed);
		SetLocalVarInt("SeizureState", 0);
	}
	else
	{
	    FadePlayerRollTo(-rollamount, rollspeed, rollspeed);
		SetLocalVarInt("SeizureState", 1);
	}
	FadeImageTrailTo(imagetrailamount, imagetrailspeed);
	FadeRadialBlurTo(bluramount, blurspeed);
	FadePlayerFOVMulTo(fovamount, fovspeed);
	FadePlayerAspectMulTo(aspectamount, aspectspeed);
	AddTimer("a", timeramount, "SeizureMoment");		
}
void BreakReset(string &in asEntity, string &in type)
{
	if(GetGlobalVarInt("SetRespawns") == 1) AddTimer(asEntity, 30.0f, "ResetMe");
}
void ResetMe(string &in asTimer)
{
	ResetProp(asTimer);
}
void MapLeaver()
{
	StopMusic(1, 1);
	StopMusic(1, 2);
	StopMusic(1, 3);
	StopMusic(1, 10);
	RemoveTimer("a");
	RemoveTimer("b");
	RemoveTimer("c");
	RemoveTimer("d");
	RemoveTimer("e");
	RemoveTimer("f");
	RemoveItem("InventoryCrowbar");
	RemoveItem("InventoryHammer");
	RemoveItem("InventoryKeyLeave");
	RemoveItem("InventoryKeyRusty");
	RemoveItem("InventoryJar");
	RemoveItem("InventoryKeyClean");
	RemoveItem("InventoryJarOil");
	RemoveItem("Crowbar");
	RemoveItem("Hammer");
	RemoveItem("KeyLeave");
	RemoveItem("KeyRusty");
	RemoveItem("Jar");
	RemoveItem("KeyClean");
	RemoveItem("JarOil");
	for(int x = 1; x <= 10000; x++)
	{
		RemoveEntityCollideCallback("Player", "landmine_" + x);
	}
}
void RespawnGeneric()
{
	AddLocalVarInt("DeathCount", 1);
	SetLocalVarInt("TrensletorSkin", RandInt(1, 6));
	SetDeathHint("DeathHint", "DeathMessage" + RandInt(1, 5));
	RemoveTimer("d");
	RemoveTimer("f");
	ResetProp("*");
	SetEnemySanityDecreaseActive("servant_*", false);
	for(int x = 1; x <= GetLocalVarInt("SpawnNodes"); x++)
	{
		SetLocalVarInt("CanSpawnAtPos" + x, 1);
	}
	SetEntityActive("landmine_*", false);
	DifficultySetter(GetGlobalVarInt("SetDifficulty"));
	if(GetGlobalVarInt("SetOverload") == 1)
	{
		SpawnOverload();
	}
	else
	{
		SpawnEnemies();
	}
	if(GetGlobalVarInt("SetAggressive") == 2) PlayMusic("ripbozo.ogg", true, 1, 1, 10, false);
	if(GetGlobalVarInt("IsPartyMap") == 1) ChooseTune();
	else PlayMusic("10_amb.ogg", true, 1, 1, 1, false);
	AddTimer("d", 1.0f, "IllusionerFix");
	SetLocalVarInt("IllusionerCooldown", 0);
	for(int x = 1; x <= 10; x++)
	{
		SetLocalVarInt("Illusioner_Overload_" + x + "_Cooldown", 0);
	}
	SetLocalVarInt("KrabsCooldown", 0);
	SetEnemyDisabled("servant_Plankton", false);
	for(int x = 1; x <= 10; x++)
	{
		SetLocalVarInt("Krabs_Overload_" + x + "_Cooldown", 0);
		SetEnemyDisabled("servant_Overload_Plankton_" + x, false);
	}
}