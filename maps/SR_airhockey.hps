#include "SR_Maths.hps"

void OnStart()
{
	AddEntityCollideCallback("Airhockey_Fintex", "Bank_West", "BangZ", false, 1);
	AddEntityCollideCallback("Airhockey_Fintex", "Bank_East", "BangZ", false, 1);
	AddEntityCollideCallback("Airhockey_Fintex", "Bank_North", "BangX", false, 1);
	AddEntityCollideCallback("Airhockey_Fintex", "Bank_South", "BangX", false, 1);
	AddEntityCollideCallback("Airhockey_Fintex", "Goal_Good", "Goal", false, 1);
	AddEntityCollideCallback("Airhockey_Fintex", "Goal_Bad", "Goal", false, 1);
}
void OnEnter()
{
	SetEnemySanityDecreaseActive("servant_*", false);
	SetPlayerMoveSpeedMul(0.0f);
	SetPlayerRunSpeedMul(0.0f);
	SetPlayerJumpDisabled(true);
	SetPlayerCrouching(false);
	SetPlayerCrouchDisabled(true);
	AddTimer("", 0.1f, "VelocityCounter");
	AddTimer("", 1.0f, "Starter0");
	StopMusic(1, 1);
	SetLocalVarInt("GoalsYou", 0);
	SetLocalVarInt("GoalsEnemy", 0);
	SetPropStaticPhysics("Airhockey_Fintex", true);
	
	SetLocalVarFloat("StaticBooster", 1.0f);
	SetLocalVarFloat("BoundaryBooster", 1.0f);
	SetLocalVarFloat("AiBooster", 1.0f);
	
	UpdateDisplay();
}
void OnLeave()
{
	
}
void VelocityCounter(string &in asTimer)
{
	AddTimer("", 0.1f, "VelocityCounter");
	float oldx = GetLocalVarFloat("FintexOldX");
	float newx = GetEntityPosX("Airhockey_Fintex");
	float oldz = GetLocalVarFloat("FintexOldZ");
	float newz = GetEntityPosZ("Airhockey_Fintex");
	float distx = MathAbs(oldx - newx);
	float distz = MathAbs(oldz - newz);
	float velocity = MathSqrt((distx * distx) + (distz * distz));
	float velocityx = newx - oldx;
	float velocityz = newz - oldz;
	SetLocalVarFloat("Velocity", velocity);
	SetLocalVarFloat("VelocityX", velocityx);
	SetLocalVarFloat("VelocityZ", velocityz);
	SetLocalVarFloat("FintexOldX", newx);
	SetLocalVarFloat("FintexOldZ", newz);
}
float GetVelocity(string Type)				//Orientation --> North = -X, South = X, East = -Z, West = Z
{
	if(Type == "X") return GetLocalVarFloat("VelocityX");
	else if(Type == "Z") return GetLocalVarFloat("VelocityZ");
	else if(Type == "General") return GetLocalVarFloat("Velocity");
	return 0.0f;
}
void BangX(string &in asParent, string &in asChild, int alState)
{
	float VelocityX = GetVelocity("X");
	float VelocityZ = GetVelocity("Z");
	StopPropMovement("Airhockey_Fintex");
	AddPropForce("Airhockey_Fintex", 0.0f, 0.0f, VelocityZ * 4000.0, "world");
	AddPropForce("Airhockey_Fintex", -VelocityX * 4000.0f, 0.0f, 0.0f, "world");
}
void BangZ(string &in asParent, string &in asChild, int alState)
{
	float VelocityX = GetVelocity("X");
	float VelocityZ = GetVelocity("Z");
	StopPropMovement("Airhockey_Fintex");
	AddPropForce("Airhockey_Fintex", 0.0f, 0.0f, -VelocityZ * 4000.0, "world");   
	AddPropForce("Airhockey_Fintex", VelocityX * 4000.0f, 0.0f, 0.0f, "world");
}
void Starter0(string & in asTimer)
{
	PlayMusic("hockeystart.ogg", true, 1, 1, 2, false);
	SetEntityActive("l1_4", false);
	SetEntityActive("l2_4", false);
	SetEntityActive("l3_4", false);
	SetEntityActive("l4_4", false);
	AddTimer("", 3.5f, "Starter1");
}
void Starter1(string &in asTimer)
{
	SetMessage("Info", "Count3", 1.0f);
	AddTimer("", 1.0f, "Starter2");
	EnemySpawn();
}
void Starter2(string &in asTimer)
{
	SetMessage("Info", "Count2", 1.0f);
	AddTimer("", 1.0f, "Starter3");
}
void Starter3(string &in asTimer)
{
	SetMessage("Info", "Count1", 1.0f);
	AddTimer("", 1.0f, "Starter4");
}
void Starter4(string &in asTimer)
{
	SetMessage("Info", "CountGo", 1.0f);
	AddTimer("", 184.0f, "LastMinute");
	StartGame();
}
void EnemySpawn()
{
	string[] EnemyList = {"Magician", "Ninja", "Athlete", "Rafalala", "Beholder", "Jackal", "Charger", "Trensletor", "Illusioner", "Bull", "Krabs"};
	string Chosen = "servant_" + EnemyList[RandInt(0, EnemyList.length() - 1)];
	SetEntityActive(Chosen, true);
	TeleportEnemyToNode(Chosen, "gamenode", true);
	AddEnemyPatrolNode(Chosen, "gamenode_1", 15.0f, "Idle");
}
void StartGame()
{
	AddTimer("StaticCheck", 0.01f, "StaticChecker");
	AddTimer("BoundaryCheck", 0.01f, "BoundaryChecker");
	AddTimer("AiCheck", 0.01f, "AiChecker");
	SetPropStaticPhysics("Airhockey_Fintex", false);
	AddPropForce("Airhockey_Fintex", RandFloat(-1500.0f, 1500.0f), 0.0f, RandFloat(-1500.0f, 1500.0f), "world");
}
void LastMinute(string &in asTimer)
{
	SetMessage("Info", "LastGo", 2.0f);
	PlayMusic("hockeyintense.ogg", true, 1, 0.01f, 3, false);
	SetLocalVarFloat("StaticBooster", 2.0f);
	SetLocalVarFloat("BoundaryBooster", 1.5f);
	SetLocalVarFloat("AiBooster", 3.0f);
	AddTimer("", 60.0f, "Ending");
}
void Ending(string &in asTimer)
{
	FadeEnemyToSmoke("servant_*", true);
	SetEntityActive("Airhockey_Fintex", false);
	RemoveTimer("AiCheck");
	RemoveTimer("BoundaryCheck");
	RemoveTimer("StaticCheck");
	StopMusic(1, 1);
	StopMusic(1, 2);
	StopMusic(1, 3);
	if(GetLocalVarInt("GoalsYou") > GetLocalVarInt("GoalsEnemy")) SetMessage("Info", "HockeyWinner", 5.0f);
	else if(GetLocalVarInt("GoalsYou") < GetLocalVarInt("GoalsEnemy")) SetMessage("Info", "HockeyLoser", 5.0f);
	else SetMessage("Info", "HockeyTie", 5.0f);
	AddTimer("", 7.0f, "Leaving");
}
void Leaving(string &in asTimer)
{
	ChangeMap("SR_spawn.map", "PlayerStartArea_4", "", "");
}
void StaticChecker(string &in asTimer)
{
	float Boost = GetLocalVarFloat("StaticBooster");
	if(GetVelocity("General") < 0.035f * Boost) AddPropForce("Airhockey_Fintex", GetVelocity("X") * 100000.0f * Boost, 0.0f, GetVelocity("Z") * 100000.0f * Boost, "world");
	AddTimer("StaticCheck", 0.1f, "StaticChecker");
	string x = GetVelocity("X");
	string z = GetVelocity("Z");
}
void BoundaryChecker(string &in asTimer)
{
	float Boost = GetLocalVarFloat("BoundaryBooster");
	float X = GetEntityPosX("Airhockey_Fintex");
	float Y = GetEntityPosY("Airhockey_Fintex");
	float Z = GetEntityPosZ("Airhockey_Fintex");
	if(Z < -1.2f || Z > 1.1f || X > 2.0f || X < -1.4f || Y > 12.5f || Y < 12.15f)
	{
		ResetProp("Airhockey_Fintex");
		StopPropMovement("Airhockey_Fintex");
		AddPropForce("Airhockey_Fintex", RandFloat(-1500.0f * Boost, 1500.0f * Boost), 0.0f, RandFloat(-1500.0f * Boost, 1500.0f * Boost), "world");
	}
	
	float PuckYouX = GetEntityPosX("Airhockey_Good");
	float PuckYouY = GetEntityPosY("Airhockey_Good");
	float PuckYouZ = GetEntityPosZ("Airhockey_Good");
	float PuckEnemyX = GetEntityPosX("Airhockey_Bad");
	float PuckEnemyY = GetEntityPosY("Airhockey_Bad");
	float PuckEnemyZ = GetEntityPosZ("Airhockey_Bad");
	
	if(PuckYouY > 13.0f)
	{	
		ResetProp("Airhockey_Good");
		ChangePlayerStateToNormal();
	}
	if(PuckEnemyY > 12.7f)
	{	
		ResetProp("Airhockey_Bad");
	}
	
	float DistanceYou = MathSqrt((MathAbs(PuckYouX - X) * MathAbs(PuckYouX - X)) + (MathAbs(PuckYouZ - Z) * MathAbs(PuckYouZ - Z)));
	float DistanceEnemy = MathSqrt((MathAbs(PuckEnemyX - X) * MathAbs(PuckEnemyX - X)) + (MathAbs(PuckEnemyZ - Z) * MathAbs(PuckEnemyZ - Z)));

	if(DistanceYou < 0.3f)
	{
		StopPropMovement("Airhockey_Fintex");
		AddPropForce("Airhockey_Fintex", RandFloat(-1500.0f * Boost, -1000.0f * Boost), 0.0f, RandFloat(-1500.0f * Boost, 1500.0f * Boost), "world");
		PlaySoundAtEntity("glss", "impact_glass_high.snt", "Airhockey_Good", 0.01f, false);
	}
	if(DistanceEnemy < 0.3f)
	{
		StopPropMovement("Airhockey_Fintex");
		AddPropForce("Airhockey_Fintex", RandFloat(1000.0f * Boost, 1500.0f * Boost), 0.0f, RandFloat(-1500.0f * Boost, 1500.0f * Boost), "world");
		PlaySoundAtEntity("glss", "impact_glass_high.snt", "Airhockey_Bad", 0.01f, false);
	}
	AddTimer("BoundaryCheck", 0.1f, "BoundaryChecker");
}
void AiChecker(string &in asTimer)
{
	float Boost = GetLocalVarFloat("AiBooster");
	float X = GetEntityPosX("Airhockey_Bad");
	float Z = GetEntityPosZ("Airhockey_Bad");
	AddTimer("AiCheck", 0.1f, "AiChecker");
	if(X > -0.1f)
	{
		AddPropForce("Airhockey_Bad", -300.0f * Boost, 0.0f, 0.0f, "world");
	}
	else if(X < GetEntityPosX("Airhockey_Fintex"))
	{
		AddPropForce("Airhockey_Bad", 500.0f * Boost, 0.0f, 0.0f, "world");
	}
	else
	{
		AddPropForce("Airhockey_Bad", -500.0f * Boost, 0.0f, RandFloat(-1500.0f * Boost, 1500.0f * Boost), "world");
		return;
	}
	if(Z > GetEntityPosZ("Airhockey_Fintex"))
	{
		AddPropForce("Airhockey_Bad", 0.0f, 0.0f, -700.0f * Boost, "world");
	}
	else
	{
		AddPropForce("Airhockey_Bad", 0.0f, 0.0f, 700.0f * Boost, "world");
	}
}
void Goal(string &in asParent, string &in asChild, int alState)
{
	PlayGuiSound("winnersounds.snt", 1);
	RemoveTimer("AiCheck");
	RemoveTimer("StaticCheck");
	ResetProp("Airhockey_Bad");
	ResetProp("Airhockey_Good");
	ResetProp("Airhockey_Fintex");
	StopPropMovement("Airhockey_Fintex");
	SetPropStaticPhysics("Airhockey_Fintex", true);
	if(StringSub(asChild, 5, 4) == "Good")
	{
		SetMessage("Info", "GoalYou", 3.0f);
		AddLocalVarInt("GoalsYou", 1);
	}
	else
	{
		SetMessage("Info", "GoalEnemy", 3.0f);
		AddLocalVarInt("GoalsEnemy", 1);
	}
	UpdateDisplay();
	AddTimer("NewRounder", 3.0f, "NewRound");
}
void NewRound(string &in asTimer)
{
	StartGame();
}
void UpdateDisplay()
{
	HockeyScoreUpdate(GetLocalVarInt("GoalsEnemy"), true);
	HockeyScoreUpdate(GetLocalVarInt("GoalsYou"), false);
}