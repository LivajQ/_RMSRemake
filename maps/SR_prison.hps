#include "SR_EnemyFuncs.hps"
#include "SR_MainMapsSettings.hps"
#include "SR_Maths.hps"

void OnStart()
{
	SetEntityPlayerInteractCallback("ButtonMusic", "Song", false);
	SetEntityPlayerInteractCallback("ButtonLeave", "Leaving", false);
	SetEntityPlayerInteractCallback("ItemPick_JarWax", "GimmeItem", false);
	SetEntityPlayerInteractCallback("ItemPick_Lighter", "GimmeItem", false);
	SetEntityPlayerInteractCallback("ItemPick_String", "GimmeItem", false);
	SetEntityPlayerLookAtCallback("servant_Illusioner", "IllusionerEffect", false);
	for(int x = 1; x <= 10; x++)
	{	
		SetEntityPlayerLookAtCallback("servant_Overload_Illusioner_" + x, "IllusionerEffect", false);
	}
	SetLocalVarInt("SpawnNodes", 15);
	SetLocalVarInt("NodeAmount", 256);
	SetLocalVarInt("SeizureState", 1);
	SetLocalVarFloat("DistanceReward", 20.0f);
	
	for(int x = 1; x <= 100; x++)
	{
		SetEntityCallbackFunc("cellar_wood01_" + x, "BreakReset");
		SetEntityCallbackFunc("prison_" + x, "BreakReset");
		SetEntityCallbackFunc("prison_section_" + x, "BreakReset");
		SetEntityCallbackFunc("prison_section_static_" + x, "BreakReset");
	}
	
	//Quest
	SetEntityPlayerInteractCallback("ScriptArea_3", "AcidLid", false);
	SetEntityPlayerInteractCallback("level_wood_1", "CanLeave", false);

	AddUseItemCallback("HotInHere", "InventoryJarWax", "ScriptArea_2", "WaxHeating", false);
	AddUseItemCallback("GimmeFuse", "InventoryString", "glass_container_mix_notdone_static_1", "FuseMaker", false);
	AddUseItemCallback("FuseFail", "InventoryString", "explodingjr_1", "NotFuse", false);
	AddUseItemCallback("FuseSuccess", "InventoryFuse", "explodingjr_1", "IsFuse", false);
	AddUseItemCallback("LighterFail", "InventoryLighter", "explodingjr_1", "NoLighter", false);
	AddUseItemCallback("LighterSuccess", "InventoryLighter", "ScriptArea_4", "YesLighter", false);
	AddEntityCollideCallback("Explosive", "ScriptArea_3", "PlaceExplosive", false, 1);
}
void OnEnter()
{
	SetLocalVarInt("IllusionerCooldown", 0);
	for(int x = 1; x <= 10; x++)
	{
		SetLocalVarInt("Illusioner_Overload_" + x + "_Cooldown", 0);
	}
	SetLocalVarInt("KrabsCooldown", 0);
	for(int x = 1; x <= 10; x++)
	{
		SetLocalVarInt("Krabs_Overload_" + x + "_Cooldown", 0);
	}
	PlaySoundAtEntity("BestSound", "krabwalker.snt", "servant_Krabs", 0.1f, false);
	for(int x = 1; x <= 10; x++)
	{
		PlaySoundAtEntity("BestSound", "krabwalker.snt", "servant_Overload_Krabs_" + x, 0.1f, false);
	}
	
	CheckPoint("SuperCheckpoint", "PlayerStartArea_1", "Respawn", "DeathHint", "DeathMessage" + RandInt(1, 5));
	SetEnemySanityDecreaseActive("servant_*", false);
	SetEnemySanityDecreaseActive("*_Scp173*", true);
	SetMapDisplayNameEntry("prison");
	SetLocalVarString("MapTheme", "12_amb.ogg");
	SetLocalVarInt("EnemyCount", 0);
	SetLocalVarInt("DeathCount", 0);
	SetLocalVarInt("MineIndex", 1);
	SetLocalVarInt("Scp173sound", 1);
	SetLocalVarInt("TrensletorSkin", RandInt(1, 6));
	SetLocalVarFloat("DistanceTraveled", 0.0f);
	SetLocalVarFloat("PlayerX", GetPlayerPosX());
	SetLocalVarFloat("PlayerY", GetPlayerPosY());
	SetLocalVarFloat("PlayerZ", GetPlayerPosZ());

	if(GetGlobalVarInt("SetSpeed") == 1) SetLocalVarFloat("Multiplier", 2.0f);
	else SetLocalVarFloat("Multiplier", 1.0f);
	DifficultySetter(GetGlobalVarInt("SetDifficulty"));
	
	if(GetGlobalVarInt("SetInvincible") == 1) SetEnemyDisableTriggers("servant_*", true);
	
	if(GetGlobalVarInt("IsPartyMap") == 1) 
	{
		PartyStarter();
		SetEntityActive("ButtonMusic", true);
	}
	else PlayMusic(GetLocalVarString("MapTheme"), true, 1, 1, 1, false);
	
	if(GetGlobalVarInt("SetShield") == 1)
	{
		if(GetGlobalVarInt("PurchasedShieldL") == 1) SetEntityActive("ballisticshield_1", true);
		if(GetGlobalVarInt("PurchasedShieldH") == 1) SetEntityActive("heavyshield_1", true);
	}
	else 
	{
		SetEntityActive("ballisticshield_1", false);
		SetEntityActive("heavyshield_1", false);
	}
	
	if(GetGlobalVarInt("SetSeizure") == 1)
	{
		AddTimer("a", 1.0f, "SeizureMoment");
	}
	else 
	{
		SetEntityActive("ballisticshield_1", false);
		SetEntityActive("heavyshield_1", false);
	}
	if(GetGlobalVarInt("SetMagician") == 1)
	{
		AddTimer("a", 3.0f, "MagicianTeleport");
	}
	else
	{
		AddTimer("a", 30.0f, "MagicianTeleport");
	}
	
	if(GetGlobalVarInt("SetMines") == 1) AddTimer("a", 5.0f, "RafalalaMine");
    else AddTimer("a", 35.0f, "RafalalaMine");
	
	
	for(int x = 1; x <= GetLocalVarInt("SpawnNodes"); x++)
	{
		SetLocalVarInt("CanSpawnAtPos" + x, 1);
	}
	
	if(GetGlobalVarInt("SetOverload") == 1)
	{
		SetLocalVarInt("EnemyCount", 10);
		SpawnOverload();
	}
	else
	{
		CheckEnemyCount();
		SpawnEnemies();
	}
	
	if(GetGlobalVarInt("SetAggressive") != 0)
	{
		AddTimer("b", 0.5f, "AggressiveLoop");
		if(GetGlobalVarInt("SetAggressive") == 2) PlayMusic("ripbozo.ogg", true, 1, 1, 10, false);
	}
	
	SpawnItems();
	
	AddTimer("c", 1.0f, "AggroReset");
	AddTimer("c", 1.0f, "TravelChecker");
	AddTimer("c", 60.0f, "Reward");
	AddTimer("c", 1.0f, "MonsterFallPreventer");
	AddTimer("c", 1.0f, "ItemPickSafe");
	AddTimer("c", 1.0f, "KrabsLoop");
	AddTimer("c", 1.0f, "JackalDetect");
	AddTimer("c", 1.0f, "Scp173Flow");
	
	AddEnemyPatrolNode("servant_Scp173", "PathNodeArea_135", 1.0f, "");
	AddEnemyPatrolNode("servant_Scp173", "PathNodeArea_136", 1.0f, "");
	//Quest
	SetLocalVarInt("BoomHappened", 0);
	
	AutoSave();
}
void OnLeave()
{
	StopMusic(1, 1);
	StopMusic(1, 2);
	StopMusic(1, 3);
	StopMusic(1, 10);
	RemoveTimer("a");
	RemoveTimer("b");
	RemoveTimer("c");
	RemoveTimer("d");
	RemoveTimer("e");
	RemoveTimer("f");
	RemoveItem("InventoryJarWax");
	RemoveItem("InventoryLighter");
	RemoveItem("InventoryString");
	RemoveItem("InventoryFuse");
	RemoveItem("JarWax");
	RemoveItem("Lighter");
	RemoveItem("String");
	RemoveItem("Fuse");
	for(int x = 1; x <= 10000; x++)
	{
		RemoveEntityCollideCallback("Player", "landmine_" + x);
	}
}
void Respawn(string &in asName, int alCount)
{
	RespawnGeneric();
	SpawnItems();
	DestroyParticleSystem("Lightin");
	SetLocalVarInt("BoomHappened", 0);
	RemoveItem("InventoryJarWax");
	RemoveItem("InventoryLighter");
	RemoveItem("InventoryString");
	RemoveItem("InventoryFuse");
	RemoveItem("JarWax");
	RemoveItem("Lighter");
	RemoveItem("String");
	RemoveItem("Fuse");
	SetEntityActive("glass_container_mix_notdone_static_1", false);
	SetEntityActive("ScriptArea_2", true);
	SetEntityActive("ScriptArea_3", true);
	SetEntityActive("ScriptArea_4", false);
	SetEntityActive("explodingjr_1", false);
	SetEntityActive("block_box_23", true);
	SetEntityActive("rope_beam02_3", false);
	SetEntityActive("prison_section_2", true);
	SetEntityActive("rock_med02_push_1", true);
	SetEntityActive("rock_med02_push_2", true);
	SetEntityActive("rock_med02_push_3", true);
	SetEntityActive("wood_beam_1", true);
	SetEntityActive("wood_beam_2", true);
	SetPropStaticPhysics("Explosive", false);
	
}
void SpawnItems()
{
	int NormalSlots = 9;
	int SpecialSlots = 5;
	for(int x = 1; x <= NormalSlots; x++)
	{
		SetLocalVarInt("NormalSlot" + x, 1);
	}
	for(int x = 1; x <= SpecialSlots; x++)
	{
		SetLocalVarInt("SpecialSlot" + x, 1);
	}
	
	string[] NormalItems = {"JarWax", "Lighter", "String"};
	string[] SpecialItems = {"Explosive"};
	
	for(int x = 0; x < NormalItems.length(); x++)
	{
		while(true)
		{
			int Slot = RandInt(1, NormalSlots);
			if(GetLocalVarInt("NormalSlot" + Slot) == 0) continue;
			PlaceEntityAtEntity(NormalItems[x], "ItemNormal_" + Slot, "", false);
			PlaceEntityAtEntity("ItemPick_" + NormalItems[x], NormalItems[x], "", false);
			SetLocalVarInt("NormalSlot" + Slot, 0);
			break;
		}
	}
	for(int x = 0; x < SpecialItems.length(); x++)
	{
		while(true)
		{
			int Slot = RandInt(1, SpecialSlots);
			if(GetLocalVarInt("SpecialSlot" + Slot) == 0) continue;
			PlaceEntityAtEntity(SpecialItems[x], "ItemSpecial_" + Slot, "", false);
			PlaceEntityAtEntity("ItemPick_" + SpecialItems[x], SpecialItems[x], "", false);
			SetLocalVarInt("SpecialSlot" + Slot, 0);
			break;
		}
	}
	
	//height correctors
	string[] ToHeighten = {"Explosive", "Lighter", "JarWax"};
	float[] Values = {0.6f, 0.152f, 0.23f};
	for(int x = 0; x < ToHeighten.length(); x++)
	{
		SetEntityPos(ToHeighten[x], GetEntityPosX(ToHeighten[x]), GetEntityPosY(ToHeighten[x]) + Values[x], GetEntityPosZ(ToHeighten[x]));
		PlaceEntityAtEntity("ItemPick_" + ToHeighten[x], ToHeighten[x], "", false);
	}
}
void GimmeItem(string &in asEntity)
{
	string Item = StringSub(asEntity, 9, 15);
	GiveItem("Inventory" + Item, "Puzzle", "Inv" + Item, ImageGetter(Item), 1);
	SetEntityPos(Item, 0.0f, 100.0f, 0.0f);
	SetEntityPos("ItemPick_" + Item, 0.0f, 100.0f, 0.0f);
	PlayGuiSound("pick_generic.snt", 1);
}
string ImageGetter(string Item)
{
	if(Item == "JarWax") return "glass_container_mix_notdone.tga";
	else if(Item == "Lighter") return "lighterjr.tga";
	else if(Item == "String") return "pile_string.tga";
	return "";
}
void ItemPickSafe(string &in asTimer)
{
	string[] Items = {"KeyRusty", "Crowbar", "Jar", "Hammer", "KeyLeave"};
	for(int x = 0; x < Items.length(); x++)
	{
		PlaceEntityAtEntity("ItemPick_" + Items[x], Items[x], "", false);
	}
	AddTimer("c", 1.0f, "ItemPickSafe");
}

//Quest part
void WaxHeating(string &in asItem, string &in asEntity)
{
	RemoveItem(asItem);
	PlayGuiSound("impact_glass_med.snt", 1);
	SetEntityActive("glass_container_mix_notdone_static_1", true);
	SetEntityActive(asEntity, false);
}
void FuseMaker(string &in asItem, string &in asEntity)
{
	RemoveItem(asItem);
	GiveItem("InventoryFuse", "Puzzle", "InvFuse", "pile_string.tga", 1);
}
void NotFuse(string &in asItem, string &in asEntity)
{
	SetMessage("Info", "IsNoFuse", 4.0f);
}
void IsFuse(string &in asItem, string &in asEntity)
{
	SetEntityActive("rope_beam02_3", true);
	SetEntityActive("ScriptArea_4", true);
	RemoveItem(asItem);
}
void NoLighter(string &in asItem, string &in asEntity)
{
	SetMessage("Info", "IsNoLighter", 4.0f);
}
void YesLighter(string &in asItem, string &in asEntity)
{
	RemoveItem(asItem);
	PlayGuiSound("ui_use_tinderbox.snt", 1);
	CreateParticleSystemAtEntity("Lightin", "ps_fire_lab_burner.ps", "FuseParticle", false);
	AddTimer("a", 5.0f, "BigBoom");
}
void BigBoom(string &in asTimer)
{
	float DistX = GetPlayerPosX() - GetEntityPosX("explodingjr_1");
	float DistZ = GetPlayerPosZ() - GetEntityPosZ("explodingjr_1");
	float DistTotal = MathSqrt((DistX * DistX) + (DistZ * DistZ));
	string MyDistance = DistTotal;
	AddDebugMessage(MyDistance, false);
	SetLocalVarInt("BoomHappened", 1);
	DestroyParticleSystem("Lightin");
	if(DistTotal < 10.0f) GivePlayerDamage(9999.0f, "BloodSplat", true, true);
	else
	{
		SetEntityActive("explodingjr_1", false);
		SetEntityActive("block_box_23", false);
		SetEntityActive("rope_beam02_3", false);
		SetEntityActive("prison_section_2", false);
		SetEntityActive("rock_med02_push_1", false);
		SetEntityActive("rock_med02_push_2", false);
		SetEntityActive("rock_med02_push_3", false);
		SetEntityActive("wood_beam_1", false);
		SetEntityActive("wood_beam_2", false);
		ShowEnemyPlayerPosition("servant_*");
	}
}
void PlaceExplosive(string &in asParent, string &in asChild, int alState)
{
	SetEntityActive(asChild, false);
	SetEntityActive("explodingjr_1", true);
	SetEntityPos(asParent, 0.0f, 100.0f, 0.0f);
	SetPropStaticPhysics(asParent, true);
}
void CanLeave(string &in asEntity)
{
	if(GetLocalVarInt("BoomHappened") == 0) SetMessage("Mono", "TrynaCheat", 4.0f);
	else YouWin();
}